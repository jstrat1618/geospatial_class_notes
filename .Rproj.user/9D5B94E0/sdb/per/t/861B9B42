{
    "collab_server" : "",
    "contents" : "#Lesson 1 Notes\nLongitude specifies East to West; Lattitude specifes North to South\n+ve numbers represent North or East depending on whether they are specifying Lattitude or Longitude \nLongitudes are typically reprsented first since they reprsent East or West (like the x-axis)\n\n\n#Types of Spatial Data\nThe house sales data we've been working with is an example of point data.\nThere are other types of spatial data- line data, polygon data, raster data\n\nLine data is associted with a collection of points that are assumed to be joined by a line\nPolygon data is data associated with an area. Here the data is a collection of points that are assumed to be connected by lines and enclose an area.\nRaster (akagrid data) is specified with an origin and steps in the x and y axis. Data is associated with every cell in the grid.\n\nWards are areas that roughly have equal number of people.\n\n#Drawing Polygons\nDrawing polygons can be tricky because \n*Order Matters\n*Some areas may need more than one polygon (e.g a hole in the middle or a dividing river)\nNote some data (summary data) associated with a polygon may be repeated for points within the same polygon\n\n#Chapter 2\n#Introduction to sp objects\n\nData frames aren't great for storing spatial data for the following reasons\n*There is no easy way to keep coordinate reference system information\n*Inefficient for complicated spatial objects (e.g. polygon data)\n*Hierarchical structure gets forced into a flat structure\n\nFeatures of the sp package\n*Classes for storing different types of spatial data\n*Methods for spatial objects, for manipulation\n*Useful for point, line, and polygon data\n*New spatial packages expect data in an sp object\n\nSo far we've learned about the SpatialPolygons object and the SpatialPolygonsDataFrame object in the sp package\nThe primary differince is the SpatialPolygonsDataFrame has an associated DataFrame (df) with it (that's why it has the extra slot in the summary[see summary(countries_sp) and summary(countries_spdf)]).\n\nsp objects are S4 classes\nS4 is one of the OO systems in R\n\nKey OO concepts\n\t*class: defines a type of object, their attributes and their relationship to other classes\n\t*methods: functions whose behaviour depends on the class input\n\t\nS4 objects can have recursive structure, elements are called slots\n\nslots are like lists in that they can store anything but accessing different elements through slots is different\n\nS4 objects, like lists, are recursive- you can store other S4 objects in the slots of another S4 object\n\nAccessing slots\n1.) Use a dedicated methods\n\te.g. the proj4string method - see proj4string(countries_sp)\n\n2.)Use the @ symbol (kind of like using the $ sign with lists)\n\te.g. countries_sp@proj4string\n\n3.) The slot() function\n\te.g. slot(countries_sp, \"proj4string\")\n\t\n\t\nThe polygon object hierarchy\nA polygon describes a single polygon\nA polygons object is made up of several polygon objects\nA SpatialPolygons object is made up of several polygons along with coordinate information\nA SpatialPolygons object is made up of a SpatialPolygons object with more data\n\nThe lines hierarch in the sp package\nA line describes a single line\nA lines object is made up of several lines\nA SpatialLines object is made up of several lines along with coordinate info\nA SpatialLinesDataFrame frame is made up of a SpatialLines object with more data\n\nsp also provides a SpatialPoints object, however, the heirarch is different\nPoints make up a SpatialPoints object with coordinate information\nA SpatialPointsDataFrame is made up of a SpatialPoints object with mroe data\n\nSubsetting sp objects\nSubsetting sp objects are designed to mimic to mimic subbsetting a data frame\ne.g str(countries_spdf[1,]) gives a SpatialPolygonsDataFrame but only contains the data relevant to the first country in the SpatialPolygonsDataFrame\n\n\nIntroduction to tmap\n*Similar to ggplot2\n  *plot is built up in layers\n  *ggplot2 expects data in data frames while tmap expects spatial objects\n  *layers consist of a graphical representation and a mapping of visual properties to          variablss\n  \nFor example\nlibrary(tmap)\ndata('Europe')\n\ntm_shape(Europe)+ #Specfifies the data without displaying it (like ggplot function)\n  tm_borders() #Add layer to draw borders of each country\n\n  \ntm_shape(Europe)+ #Specfifies the data without displaying it (like ggplot function)\n  tm_borders()+ #Add layer to draw borders of each country\n  tm_fill(col = 'part')+ #Unlike ggplot2 variables are referenced in quotes\n  tm_compass()+ #Non-data variables - just adds a compass\n  tmap_style('cobalt')\n\nother useful functions include: tm_fill(), tm_borders(), tm_polygons(), tm_bubbles(), tm_dots(), tm_lines, tm_raster(), tm_text()\n\n#Key differences between ggplot2\n*tmap has no scale_ equivalent functions to scale layers\n*tm_shape defines default data for any subsequent layers and can be called multiple times   in a single plot (unlike ggplot)\n*No need for x and y aesthetics since these are inherent in spatial objects\n*No special evaluation when mapping variables they must be quoted\n\n\n",
    "created" : 1494773769442.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2132439835",
    "id" : "861B9B42",
    "lastKnownWriteTime" : 1495159742,
    "last_content_update" : 1495159742762,
    "path" : "C:/Users/JustinandAbigail/Desktop/GeoSpatialCourse/Notes",
    "project_path" : "Notes",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "text"
}
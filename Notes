#Lesson 1 Notes
Longitude specifies East to West; Lattitude specifes North to South
+ve numbers represent North or East depending on whether they are specifying Lattitude or Longitude 
Longitudes are typically reprsented first since they reprsent East or West (like the x-axis)


#Types of Spatial Data
The house sales data we've been working with is an example of point data.
There are other types of spatial data- line data, polygon data, raster data

Line data is associted with a collection of points that are assumed to be joined by a line
Polygon data is data associated with an area. Here the data is a collection of points that are assumed to be connected by lines and enclose an area.
Raster (akagrid data) is specified with an origin and steps in the x and y axis. Data is associated with every cell in the grid.

Wards are areas that roughly have equal number of people.

#Drawing Polygons
Drawing polygons can be tricky because 
*Order Matters

*Some areas may need more than one polygon (e.g a hole in the middle or a dividing river)
Note some data (summary data) associated with a polygon may be repeated for points within the same polygon

#Chapter 2
#Introduction to sp objects

Data frames aren't great for storing spatial data for the following reasons
*There is no easy way to keep coordinate reference system information
*Inefficient for complicated spatial objects (e.g. polygon data)
*Hierarchical structure gets forced into a flat structure

Features of the sp package
*Classes for storing different types of spatial data
*Methods for spatial objects, for manipulation
*Useful for point, line, and polygon data
*New spatial packages expect data in an sp object

So far we've learned about the SpatialPolygons object and the SpatialPolygonsDataFrame object in the sp package
The primary differince is the SpatialPolygonsDataFrame has an associated DataFrame (df) with it (that's why it has the extra slot in the summary[see summary(countries_sp) and summary(countries_spdf)]).

sp objects are S4 classes
S4 is one of the OO systems in R

Key OO concepts
	*class: defines a type of object, their attributes and their relationship to other classes
	*methods: functions whose behaviour depends on the class input
	
S4 objects can have recursive structure, elements are called slots

slots are like lists in that they can store anything but accessing different elements through slots is different

S4 objects, like lists, are recursive- you can store other S4 objects in the slots of another S4 object

Accessing slots
1.) Use a dedicated methods
	e.g. the proj4string method - see proj4string(countries_sp)

2.)Use the @ symbol (kind of like using the $ sign with lists)
	e.g. countries_sp@proj4string

3.) The slot() function
	e.g. slot(countries_sp, "proj4string")
	
	
The polygon object hierarchy
A polygon describes a single polygon
A polygons object is made up of several polygon objects
A SpatialPolygons object is made up of several polygons along with coordinate information
A SpatialPolygons object is made up of a SpatialPolygons object with more data

The lines hierarch in the sp package
A line describes a single line
A lines object is made up of several lines
A SpatialLines object is made up of several lines along with coordinate info
A SpatialLinesDataFrame frame is made up of a SpatialLines object with more data

sp also provides a SpatialPoints object, however, the heirarch is different
Points make up a SpatialPoints object with coordinate information
A SpatialPointsDataFrame is made up of a SpatialPoints object with mroe data

Subsetting sp objects
Subsetting sp objects are designed to mimic to mimic subbsetting a data frame
e.g str(countries_spdf[1,]) gives a SpatialPolygonsDataFrame but only contains the data relevant to the first country in the SpatialPolygonsDataFrame


Introduction to tmap
*Similar to ggplot2
  *plot is built up in layers
  *ggplot2 expects data in data frames while tmap expects spatial objects
  *layers consist of a graphical representation and a mapping of visual properties to          variablss
  
For example
library(tmap)
data('Europe')

tm_shape(Europe)+ #Specfifies the data without displaying it (like ggplot function)
  tm_borders() #Add layer to draw borders of each country

  
tm_shape(Europe)+ #Specfifies the data without displaying it (like ggplot function)
  tm_borders()+ #Add layer to draw borders of each country
  tm_fill(col = 'part')+ #Unlike ggplot2 variables are referenced in quotes
  tm_compass()+ #Non-data variables - just adds a compass
  tmap_style('cobalt')

other useful functions include: tm_fill(), tm_borders(), tm_polygons(), tm_bubbles(), tm_dots(), tm_lines, tm_raster(), tm_text()

#Key differences between ggplot2
*tmap has no scale_ equivalent functions to scale layers
*tm_shape defines default data for any subsequent layers and can be called multiple times   in a single plot (unlike ggplot)
*No need for x and y aesthetics since these are inherent in spatial objects
*No special evaluation when mapping variables they must be quoted

#Chapter 3 Notes- The raster package
Data frames arent great for spatial data because 
  *No information on the coordinate reference system (CRS)
  *Inefficient storage.
  *Inefficient display- e.g you may end up needlessly drawing thousands of rectangles

A better stucter for raster data is a matrix with information about the crid and CRS
Sometimes there are multiple rasters with same grid but each measuring something 
different. These are sometimes called multi-layered or multi-banned rasters. It's useful to think of these as 3-D arrays.

sp has some raster data classes but raster is better because 
  *it's easier to import rasters
  *large rasters aren't read into memory
  *more functionality for raster type operations

The raster package also uses S4 classes. The raster package also recognizes that you are probably working the sp package and where appropriate provides the same functionality.

raster provides some methods for sp objects
This can be confusing if you are not aware of it. For example when sp is loaded and countries_spdf is printed, lots of informations is printed. On the other hand, when sp and raster are loaded and countries_spdf is printed a much more concise output is printed.


Try it out
library(geospatial)
data("countries_spdf")
library(sp)
print(countries_spdf)
library(raster)
print(countries_spdf)


Color Scales
A perceptual color space: HCL
  *Trichromatic- we percieve color as three-dimensional (Hue, Chroma and Luminance)
  Hue- based on its predeominant wavelength
    Hue is circular and unordered- there is no clear lowest or highest value
  Chroma- describes the intensity of the color from gray to maximal intensity
   People often refer to low chroma colors as "muddy"
  Luminance- describes the lightness of the color
    From black on one end to white on the other end
  
Both Chroma and Luminance are ordered. It's useful to change the chroma or lumninance of a color in a meaningful way in the context of our problem. Low Chroma (or more gray) is considered lower value than higher Chroma (more clear). Similarirly, low luminance (or darker) is considered lower than higher luminance (brighter color).

When a palate of colors is designed to be ordered we call it sequential.
A diverging palate is ordered but in two directions.  
When there is no order to a palate, the palate is called Qualatative. Genrerally, it's best to use colors of the same chroma and lumina so the audience does not mistakenly believe there is an order to the colors that isn't there. 

The RColorBrewer package is a helpful R package for generating color pallates. You can see all the color pallates via RColorBrewer::display.brewer.all(), you can get the hexadecimal codes using the brewer.pal function.
The package virdisLite is similar to RColorBrewer.

Mapping of numbers to color  
*ggplot2 maps to a contintutous gradient of color
*tmap maps to a discrete set of colors
*Continuous map: control mapping by transforming the scale (e.g log)
*Discrete map: control mapping by binning the variable

Discrete vs Continuous Mapping
Continuous 
  *Perceptually uniform: percieving equivalent color difference to a numerical difference
Disccrete
  *Complete Control of the Scale
  *Easier lookup  
  
The classInt package is useful for cutting a varaible into intervals
  
#Chapter 4 Notes
In this chapter we will learn 
*Read in shape files that descibe neighborhoods and waterways
*Match up two different coordinate systems
*Merge data from a data frame into a SpatialPolygonsDataFrame
*Polish a map to be publication ready

Reading In a shape file
Vector data: data described by points, lines and polygons
Shape file is the most common format

The rgdal package is very useful for reading in spatial data, especially shape files.
The rgdal::readOGR function is useful for reading in vector formats


Several R packages help you import spatial data into R
The rnaturalearth package provides data from Natural Earth, a source of high resolution world maps including coastlines, states, and populated places. In fact, this was the source of the data from Chapter 2.
The tigris package in R provides a way to easily download and import shapefiles based on US Census geographies.

Coordinate Reference System
What may come as a suprise is that there isn't one defintion of longitude and lattitude.
To define a longitude and lattitude you need to specify an ellipoid- an approximation to the not exactly spherical earth and a datum, a position of that elipsoid relative to the earth. 
Different choices of ellipsoid and datum lead to different that may be more convenient or accurate.
Example: The datum=WGS84, ellps=WGS84 which is shown in the output of proj4strin(countries_spdf) is a good choice for global datasets, while datum=WGS84, ellps=WGS8 shown in the output of proj4string(water) is a good choice for for data sets in the U.S.

You can also specify different projections other than longlat. For example, you'll see proj4string(nyctracts) uses the projection llc which stands lambert conformal conic

If you need to move from one projection to another you cannot simply transform the coordinates, re-assigning the proj4string, won't work! You have to transform the coordinates.  Use rgdal::spTransform

The process of converting from one CRS or projection to another is handled by the spTransform() methods in the rgdal package. spTransform() has methods for all sp objects including SpatialPolygonsDataFrame, but doesn't work on raster objects.
This is because transforming a raster is a little more complicated; the transformed rectangular grid will no longer be rectangular. You can look at ?raster::projectRaster if you are curious about transforming rasters.

tmap does some transformations for you, but it is good to know how to do them manually

Merging spatial data with other data
There are two ways the spatial objects (e.g. Polygons) might be matched up to the rows of the data. 
1.)The most robust is to use IDs on the spatial objects that are matched up to row names in the data.
2.) The other way is simply by order -- the first spatial object is assumed to correspond to the first row of data.

Once created, the correspondence is based purely on order. If you manipulate the data slot, there is no checking the spatial objects still correspond to the right rows. What does this mean in practice? It's very dangerous to manipulate the data slot directly!

Polishing your Map
*Remove distractions, let data shine
*Use spatial context
*check legend, title, and labels for readability
*Add Annotations
    *Use highlighting or arrows
    *attribute data sources
    
Quick overview
#Chapter 1
  *Types of spatial data: point, line, polygon and raster
  *Adding context using ggmap
#Chapter 2 & 3
  *Spatial classes provided by raster and sp packages
  *S4 objects
  *Introduction to the tmap package
  *Good choices for color palattes
#Chapter 4
  *Reading data
  *Transform coordinate systems
  *Adding data to Spatial___DataFrame Objects
  *Polishing your map
  